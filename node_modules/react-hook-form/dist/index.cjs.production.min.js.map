{"version":3,"file":"index.cjs.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/filterOutFalsy.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/deepMerge.ts","../src/utils/isSameError.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/isPrimitive.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/deepEqual.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/shouldRenderBasedOnError.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/utils/onDomRemove.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport filterOutFalsy from './filterOutFalsy';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = filterOutFalsy(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (unmountFieldsStateRef) {\n    return get(unmountFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport filterOutFalsy from '../utils/filterOutFalsy';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(unmountFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      filterOutFalsy(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !filterOutFalsy(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n      );\n    }\n  }\n\n  return deepMerge(\n    { ...((unmountFieldsStateRef || {}).current || {}) },\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (!isObject(target) || !isObject(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    if (isObject(targetValue) && isObject(sourceValue)) {\n      target[key] = deepMerge(targetValue, sourceValue);\n    } else {\n      try {\n        target[key] = sourceValue;\n      } catch {}\n    }\n  }\n\n  return target;\n}\n","import isObject from './isObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types = {}, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  Object.keys(error.types || {}).length === Object.keys(types).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => types[key] === value,\n  );\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? ((fields[name] as Field).options || [])[0].ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, unmountFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldValues, InternalFieldName } from '../types/form';\n\nexport const getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(value, key, isObject(values)))\n    .flat(Infinity);\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath<TFieldValues>(\n        fieldName,\n        value as TFieldValues,\n      ).forEach((name: string) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(object1: any = [], object2: any = []) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n\n    if (\n      (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n        ? !deepEqual(val1, val2)\n        : val1 !== val2\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { FieldValues, InternalFieldName } from '../types/form';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './logic/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNames,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const watchFieldsHookRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, Function>\n  >({});\n  const fieldsWithValidationRef = React.useRef({});\n  const validFieldsRef = React.useRef({});\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown>\n  >({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, () => void>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<InternalFieldName<FieldValues>>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const {\n    current: { isOnSubmit, isOnTouch },\n  } = modeRef;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    current: { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange },\n  } = React.useRef(modeChecker(reValidateMode));\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender = false,\n      state: {\n        dirtyFields?: FieldNames<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNames<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (isEmptyObject(error)) {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      } else {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(formStateRef.current.errors, name, error[name]);\n      }\n\n      if (shouldReRender || !isEmptyObject(state)) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = String(\n                  value as string | boolean,\n                ).includes(checkboxRef.value)),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNames<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNames<TFieldValues>;\n    } => {\n      if (\n        !fieldsRef.current[name] ||\n        (!readFormStateRef.current.isDirty &&\n          !readFormStateRef.current.dirtyFields)\n      ) {\n        return {};\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = formStateRef.current.isDirty;\n\n      isFieldDirty\n        ? set(formStateRef.current.dirtyFields, name, true)\n        : unset(formStateRef.current.dirtyFields, name);\n\n      const state = {\n        isDirty:\n          (isFieldArray &&\n            !deepEqual(\n              get(getValues(), getFieldArrayParentName(name)),\n              get(defaultValuesRef.current, getFieldArrayParentName(name)),\n            )) ||\n          !isEmptyObject(formStateRef.current.dirtyFields),\n        dirtyFields: formStateRef.current.dirtyFields,\n      };\n\n      const isChanged =\n        (readFormStateRef.current.isDirty &&\n          previousIsDirty !== state.isDirty) ||\n        (readFormStateRef.current.dirtyFields &&\n          isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n      if (isChanged && shouldRender) {\n        updateFormState({\n          ...state,\n        });\n      }\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          unmountFieldsStateRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formState.errors, name, error)\n              : unset(formState.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isInputsValid,\n          errors: formState.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(field, get(data, fieldName));\n\n          if (shouldDirty) {\n            updateAndGetDirtyState(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n\n      set(unmountFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          !name ||\n          watchFieldsHookRef.current[key].has(name) ||\n          watchFieldsHookRef.current[key].has(getFieldArrayParentName(name)) ||\n          !watchFieldsHookRef.current[key].size\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n\n    if (isFieldWatched(name)) {\n      updateFormState();\n    }\n\n    renderWatchedInputs(name);\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues() as TFieldValues,\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n\n            error = (get(errors, name)\n              ? { [name]: get(errors, name) }\n              : {}) as FlatFieldErrors<TFieldValues>;\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = await validateField<TFieldValues>(\n              fieldsRef,\n              isValidateAllFieldCriteria,\n              field,\n              unmountFieldsStateRef,\n            );\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, unmountFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, unmountFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return getFieldsValues(fieldsRef, unmountFieldsStateRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n      const isValid = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValid) {\n        updateFormState({\n          isValid,\n        });\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(formState.errors, field.ref.name);\n          unset(formStateRef.current.dirtyFields, field.ref.name);\n          unset(formStateRef.current.touched, field.ref.name);\n\n          updateFormState({\n            errors: formState.errors,\n            isDirty: !isEmptyObject(formStateRef.current.dirtyFields),\n            dirtyFields: formStateRef.current.dirtyFields,\n            touched: formStateRef.current.touched,\n          });\n\n          resolverRef.current && validateResolver();\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(formState.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formState.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    set(formState.errors, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formState.errors,\n    });\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        unmountFieldsStateRef,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+]\\.\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\". https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          filterOutFalsy(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...filterOutFalsy((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(unmountFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : unmountFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          unmountFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = getFieldsValues(\n        fieldsRef,\n        unmountFieldsStateRef,\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        updateFormState({\n          isSubmitting: true,\n        });\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formState.errors = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                unmountFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formState.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formState.errors).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          updateFormState({\n            errors: {},\n          });\n          await onValid(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          formState.errors = {\n            ...formState.errors,\n            ...fieldErrors,\n          };\n          if (onInvalid) {\n            await onInvalid(fieldErrors, e);\n          }\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          errors: formState.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isValid: isValid ? formStateRef.current.isValid : true,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formState.errors : {},\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = values || { ...defaultValuesRef.current };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n  };\n\n  observerRef.current =\n    observerRef.current || !isWeb\n      ? observerRef.current\n      : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formState.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    updateFormState,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (\n              process.env.NODE_ENV !== 'production' &&\n              prop === 'isValid' &&\n              isOnSubmit\n            ) {\n              console.warn(\n                '📋 `formState.isValid` is applicable with `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n              );\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport filterOutFalsy from './filterOutFalsy';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return filterOutFalsy(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\n\nexport default <T>(data: T[], from: number, to: number): (T | undefined)[] => {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined as any;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(isArray(value) ? value : [value || undefined]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): undefined[] | undefined =>\n  isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean(value: any) {\n  if (isObject(value)) {\n    const object: any = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport const filterBooleanArray = <T>(value: T): T[] =>\n  isArray(value)\n    ? value.map(mapValueToBoolean).flat()\n    : mapValueToBoolean(value);\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport deepEqual from './logic/deepEqual';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport { filterBooleanArray } from './utils/filterBooleanArray';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n} from './types/form';\n\nconst appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...value,\n});\n\nconst mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n\n    if (!name) {\n      console.warn(\n        '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef: {\n      current: { dirtyFields, touched, errors },\n    },\n    updateFormState,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateResolver,\n    renderWatchedInputs,\n    getValues,\n  } = control || methods.control;\n\n  const getDefaultValues = () => [\n    ...(get(fieldArrayDefaultValues.current, name) ||\n      get(defaultValuesRef.current, name) ||\n      []),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n  const rootParentName = getFieldArrayParentName(name);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues() || {}, name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n  fieldArrayNamesRef.current.add(name);\n\n  if (!get(fieldArrayDefaultValues.current, name) && rootParentName) {\n    set(\n      fieldArrayDefaultValues.current,\n      rootParentName,\n      get(defaultValuesRef.current, rootParentName),\n    );\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = {};\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const getIsDirtyState = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ): boolean =>\n    (readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields) &&\n    (isUndefined(flagOrFields) ||\n      !deepEqual(\n        flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n        get(defaultValuesRef.current, name),\n      ));\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(dirtyFields, name, [\n        ...(get(dirtyFields, name) || fillEmptyArray(fields.slice(0, 1))),\n        ...filterBooleanArray(value),\n      ]);\n      updateFormState({\n        isDirty: true,\n        dirtyFields,\n      });\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n    renderWatchedInputs(name);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n\n    if (isArray(get(errors, name))) {\n      set(errors, name, prependAt(get(errors, name), emptyArray));\n    }\n\n    if (readFormStateRef.current.touched && get(touched, name)) {\n      set(touched, name, prependAt(get(touched, name), emptyArray));\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        dirtyFields,\n        name,\n        prependAt(get(dirtyFields, name) || [], filterBooleanArray(value)),\n      );\n    }\n\n    updateFormState({\n      errors,\n      dirtyFields,\n      isDirty: true,\n      touched,\n    });\n\n    renderWatchedInputs(name);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    setFieldAndValidState(removeArrayAt(fieldValues, index));\n    resetFields();\n\n    if (isArray(get(errors, name))) {\n      set(errors, name, removeArrayAt(get(errors, name), index));\n\n      if (!filterOutFalsy(get(errors, name, [])).length) {\n        unset(errors, name);\n      }\n    }\n\n    if (readFormStateRef.current.touched && get(touched, name)) {\n      set(touched, name, removeArrayAt(get(touched, name), index));\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFields, name)\n    ) {\n      set(dirtyFields, name, removeArrayAt(get(dirtyFields, name), index));\n\n      if (!filterOutFalsy(get(dirtyFields, name, [])).length) {\n        unset(dirtyFields, name);\n      }\n    }\n\n    if (readFormStateRef.current.isValid && !validateResolver) {\n      set(\n        validFieldsRef.current,\n        name,\n        removeArrayAt(get(validFieldsRef.current, name, []), index),\n      );\n      if (!filterOutFalsy(get(validFieldsRef.current, name, [])).length) {\n        unset(validFieldsRef.current, name);\n      }\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        removeArrayAt(get(fieldsWithValidationRef.current, name, []), index),\n      );\n      if (\n        !filterOutFalsy(get(fieldsWithValidationRef.current, name, [])).length\n      ) {\n        unset(fieldsWithValidationRef.current, name);\n      }\n    }\n\n    updateFormState({\n      dirtyFields,\n      errors,\n      touched,\n      isDirty: getIsDirtyState(removeArrayAt(fieldValues, index)),\n    });\n\n    renderWatchedInputs(name);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n\n    setFieldAndValidState(\n      insertAt(\n        fieldValues,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n\n    if (isArray(get(errors, name))) {\n      set(errors, name, insertAt(get(errors, name), index, emptyArray));\n    }\n\n    if (readFormStateRef.current.touched && get(touched, name)) {\n      set(touched, name, insertAt(get(touched, name), index, emptyArray));\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFields, name)\n    ) {\n      set(\n        dirtyFields,\n        name,\n        insertAt(get(dirtyFields, name), index, filterBooleanArray(value)),\n      );\n    }\n\n    updateFormState({\n      dirtyFields,\n      errors,\n      touched,\n      isDirty: getIsDirtyState(insertAt(fieldValues, index)),\n    });\n\n    renderWatchedInputs(name);\n\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errors, name))) {\n      swapArrayAt(get(errors, name), indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && get(touched, name)) {\n      swapArrayAt(get(touched, name), indexA, indexB);\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFields, name)\n    ) {\n      swapArrayAt(get(dirtyFields, name), indexA, indexB);\n    }\n\n    updateFormState({\n      dirtyFields,\n      errors,\n      touched,\n      isDirty: getIsDirtyState(fieldValues),\n    });\n    renderWatchedInputs(name);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errors, name))) {\n      moveArrayAt(get(errors, name), from, to);\n    }\n\n    if (readFormStateRef.current.touched && get(touched, name)) {\n      moveArrayAt(get(touched, name), from, to);\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFields, name)\n    ) {\n      moveArrayAt(get(dirtyFields, name), from, to);\n    }\n\n    updateFormState({\n      dirtyFields,\n      errors,\n      touched,\n      isDirty: getIsDirtyState(fieldValues),\n    });\n    renderWatchedInputs(name);\n  };\n\n  const reset = () => {\n    resetFields();\n    unset(fieldArrayDefaultValues.current, name);\n    memoizedDefaultValues.current = get(defaultValuesRef.current, name);\n    setFields(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    const defaultValues = get(fieldArrayDefaultValues.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValues.current, name, defaultValues);\n    }\n\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [\n    fields,\n    name,\n    fieldArrayDefaultValues,\n    fieldsRef,\n    watchFieldsRef,\n    isWatchAllRef,\n  ]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    resetFunctions[name] = reset;\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNamesRef.current.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name, errors]),\n    move: React.useCallback(move, [name, errors]),\n    prepend: React.useCallback(prepend, [name, errors]),\n    append: React.useCallback(append, [name, errors]),\n    remove: React.useCallback(remove, [fields, name, errors]),\n    insert: React.useCallback(insert, [name, errors]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types/form';\nimport { ControllerProps } from './types/props';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production' && !control && !methods) {\n    throw new Error(\n      '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n    );\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    unmountFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(unmountFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(unmountFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (isUndefined(value)) {\n      console.warn(\n        '📋 Controller `defaultValue` or useForm `defaultValues` is missing. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (as && render) {\n      console.warn(\n        '📋 Should use either `as` or `render` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (!isNotFieldArray && isUndefined(defaultValue)) {\n      console.warn(\n        '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn(\n        '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [rules, name, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n        name,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n  FieldNames,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNames<TFieldValues>;\n  fieldsWithValidation: FieldNames<TFieldValues>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && get(validFields, name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const { ref } of field.options) {\n          if (isDetached(ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport isObject from './utils/isObject';\nimport { DeepPartial } from './types/utils';\nimport {\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types/form';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n\n    if (name === '') {\n      console.warn(\n        '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  const updateWatchValue = React.useCallback(() => {\n    const value = watchInternal(name, defaultValueRef.current, idRef.current);\n    setValue(\n      isObject(value) ? { ...value } : isArray(value) ? [...value] : value,\n    );\n  }, [setValue, watchInternal, defaultValueRef, name, idRef]);\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    const watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    updateWatchValue,\n    watchFieldsHookRenderRef,\n    watchFieldsHookRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","Array","isArray","isObjectType","isNullOrUndefined","Date","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","[object Object]","val","undefined","filter","Boolean","obj","defaultValue","filterOutFalsy","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","unmountFieldsStateRef","field","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","get","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","search","output","isString","startsWith","find","deepMerge","target","source","targetValue","sourceValue","transformToNestObject","error","types","message","every","RegExp","validationData","isValueMessage","isRegex","isValidElement","getValidateError","isMessage","validateAllFieldCriteria","errors","async","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","getValueAndMessage","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","getPath","pathWithIndex","isPrimitive","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","deepEqual","object1","object2","keys1","keys2","val1","val2","isMatchFieldArrayName","searchName","names","some","mode","isOnSubmit","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","filterBooleanArray","appendId","keyName","generateId","mapIds","_a","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","reValidateMode","formStateRef","touched","updateFormState","readFormStateRef","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","setInputStateValue","React.useState","valueRef","React.useRef","onFocusRef","shouldValidate","skipValidation","commonTask","event","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","onChange","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","dirtyFields","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValues","validateResolver","renderWatchedInputs","getValues","memoizedDefaultValues","setFields","allFields","rootParentName","getFieldArrayParentName","getCurrentFieldsValues","appendValueWithKey","setFieldAndValidState","fieldsValues","getIsDirtyState","flagOrFields","isDirty","_b","resetFields","reset","defaultValues","pop","shouldRenderUseWatch","watchField","resetFunctions","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","append","remove","removeArrayAt","insertAt","resolver","context","shouldFocusError","shouldUnregister","criteriaMode","Set","watchFieldsHookRef","watchFieldsHookRenderRef","defaultValuesAtRenderRef","isUnMount","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","formState","setFormState","submitCount","isSubmitting","observerRef","state","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","isSameError","shouldRenderBasedOnError","previousError","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","String","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","isInputsValid","Promise","all","setInternalValues","setInternalValue","config","isFieldWatched","has","found","size","getFieldsValues","shouldSkipValidation","forceDelete","handleChange","fieldRef","removeAllEventListeners","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","refOrValidationOptions","watch","prop","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}