{"version":3,"file":"index.ie11.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/filterOutFalsy.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/deepMerge.ts","../src/utils/isSameError.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/isPrimitive.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/deepEqual.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/shouldRenderBasedOnError.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/utils/onDomRemove.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport filterOutFalsy from './filterOutFalsy';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = filterOutFalsy(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (unmountFieldsStateRef) {\n    return get(unmountFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport filterOutFalsy from '../utils/filterOutFalsy';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(unmountFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      filterOutFalsy(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !filterOutFalsy(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n      );\n    }\n  }\n\n  return deepMerge(\n    { ...((unmountFieldsStateRef || {}).current || {}) },\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (!isObject(target) || !isObject(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    if (isObject(targetValue) && isObject(sourceValue)) {\n      target[key] = deepMerge(targetValue, sourceValue);\n    } else {\n      try {\n        target[key] = sourceValue;\n      } catch {}\n    }\n  }\n\n  return target;\n}\n","import isObject from './isObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types = {}, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  Object.keys(error.types || {}).length === Object.keys(types).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => types[key] === value,\n  );\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? ((fields[name] as Field).options || [])[0].ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, unmountFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldValues, InternalFieldName } from '../types/form';\n\nexport const getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(value, key, isObject(values)))\n    .flat(Infinity);\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath<TFieldValues>(\n        fieldName,\n        value as TFieldValues,\n      ).forEach((name: string) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(object1: any = [], object2: any = []) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n\n    if (\n      (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n        ? !deepEqual(val1, val2)\n        : val1 !== val2\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { FieldValues, InternalFieldName } from '../types/form';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './logic/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNames,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const watchFieldsHookRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, Function>\n  >({});\n  const fieldsWithValidationRef = React.useRef({});\n  const validFieldsRef = React.useRef({});\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown>\n  >({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, () => void>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<InternalFieldName<FieldValues>>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const {\n    current: { isOnSubmit, isOnTouch },\n  } = modeRef;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    current: { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange },\n  } = React.useRef(modeChecker(reValidateMode));\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender = false,\n      state: {\n        dirtyFields?: FieldNames<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNames<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (isEmptyObject(error)) {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      } else {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(formStateRef.current.errors, name, error[name]);\n      }\n\n      if (shouldReRender || !isEmptyObject(state)) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = String(\n                  value as string | boolean,\n                ).includes(checkboxRef.value)),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNames<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNames<TFieldValues>;\n    } => {\n      if (\n        !fieldsRef.current[name] ||\n        (!readFormStateRef.current.isDirty &&\n          !readFormStateRef.current.dirtyFields)\n      ) {\n        return {};\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = formStateRef.current.isDirty;\n\n      isFieldDirty\n        ? set(formStateRef.current.dirtyFields, name, true)\n        : unset(formStateRef.current.dirtyFields, name);\n\n      const state = {\n        isDirty:\n          (isFieldArray &&\n            !deepEqual(\n              get(getValues(), getFieldArrayParentName(name)),\n              get(defaultValuesRef.current, getFieldArrayParentName(name)),\n            )) ||\n          !isEmptyObject(formStateRef.current.dirtyFields),\n        dirtyFields: formStateRef.current.dirtyFields,\n      };\n\n      const isChanged =\n        (readFormStateRef.current.isDirty &&\n          previousIsDirty !== state.isDirty) ||\n        (readFormStateRef.current.dirtyFields &&\n          isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n      if (isChanged && shouldRender) {\n        updateFormState({\n          ...state,\n        });\n      }\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          unmountFieldsStateRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formState.errors, name, error)\n              : unset(formState.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isInputsValid,\n          errors: formState.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(field, get(data, fieldName));\n\n          if (shouldDirty) {\n            updateAndGetDirtyState(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n\n      set(unmountFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          !name ||\n          watchFieldsHookRef.current[key].has(name) ||\n          watchFieldsHookRef.current[key].has(getFieldArrayParentName(name)) ||\n          !watchFieldsHookRef.current[key].size\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n\n    if (isFieldWatched(name)) {\n      updateFormState();\n    }\n\n    renderWatchedInputs(name);\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues() as TFieldValues,\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n\n            error = (get(errors, name)\n              ? { [name]: get(errors, name) }\n              : {}) as FlatFieldErrors<TFieldValues>;\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = await validateField<TFieldValues>(\n              fieldsRef,\n              isValidateAllFieldCriteria,\n              field,\n              unmountFieldsStateRef,\n            );\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, unmountFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, unmountFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return getFieldsValues(fieldsRef, unmountFieldsStateRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n      const isValid = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValid) {\n        updateFormState({\n          isValid,\n        });\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(formState.errors, field.ref.name);\n          unset(formStateRef.current.dirtyFields, field.ref.name);\n          unset(formStateRef.current.touched, field.ref.name);\n\n          updateFormState({\n            errors: formState.errors,\n            isDirty: !isEmptyObject(formStateRef.current.dirtyFields),\n            dirtyFields: formStateRef.current.dirtyFields,\n            touched: formStateRef.current.touched,\n          });\n\n          resolverRef.current && validateResolver();\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(formState.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formState.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    set(formState.errors, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formState.errors,\n    });\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        unmountFieldsStateRef,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+]\\.\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\". https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          filterOutFalsy(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...filterOutFalsy((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(unmountFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : unmountFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          unmountFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = getFieldsValues(\n        fieldsRef,\n        unmountFieldsStateRef,\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        updateFormState({\n          isSubmitting: true,\n        });\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formState.errors = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                unmountFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formState.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formState.errors).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          updateFormState({\n            errors: {},\n          });\n          await onValid(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          formState.errors = {\n            ...formState.errors,\n            ...fieldErrors,\n          };\n          if (onInvalid) {\n            await onInvalid(fieldErrors, e);\n          }\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          errors: formState.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isValid: isValid ? formStateRef.current.isValid : true,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formState.errors : {},\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = values || { ...defaultValuesRef.current };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n  };\n\n  observerRef.current =\n    observerRef.current || !isWeb\n      ? observerRef.current\n      : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formState.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    updateFormState,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (\n              process.env.NODE_ENV !== 'production' &&\n              prop === 'isValid' &&\n              isOnSubmit\n            ) {\n              console.warn(\n                '📋 `formState.isValid` is applicable with `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n              );\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport filterOutFalsy from './filterOutFalsy';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return filterOutFalsy(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\n\nexport default <T>(data: T[], from: number, to: number): (T | undefined)[] => {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined as any;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(isArray(value) ? value : [value || undefined]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): undefined[] | undefined =>\n  isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean(value: any) {\n  if (isObject(value)) {\n    const object: any = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport const filterBooleanArray = <T>(value: T): T[] =>\n  isArray(value)\n    ? value.map(mapValueToBoolean).flat()\n    : mapValueToBoolean(value);\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport deepEqual from './logic/deepEqual';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport { filterBooleanArray } from './utils/filterBooleanArray';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n} from './types/form';\n\nconst appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...value,\n});\n\nconst mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n\n    if (!name) {\n      console.warn(\n        '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef: {\n      current: { dirtyFields, touched, errors },\n    },\n    updateFormState,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateResolver,\n    renderWatchedInputs,\n    getValues,\n  } = control || methods.control;\n\n  const getDefaultValues = () => [\n    ...(get(fieldArrayDefaultValues.current, name) ||\n      get(defaultValuesRef.current, name) ||\n      []),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n  const rootParentName = getFieldArrayParentName(name);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues() || {}, name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n  fieldArrayNamesRef.current.add(name);\n\n  if (!get(fieldArrayDefaultValues.current, name) && rootParentName) {\n    set(\n      fieldArrayDefaultValues.current,\n      rootParentName,\n      get(defaultValuesRef.current, rootParentName),\n    );\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = {};\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const getIsDirtyState = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ): boolean =>\n    (readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields) &&\n    (isUndefined(flagOrFields) ||\n      !deepEqual(\n        flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n        get(defaultValuesRef.current, name),\n      ));\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(dirtyFields, name, [\n        ...(get(dirtyFields, name) || fillEmptyArray(fields.slice(0, 1))),\n        ...filterBooleanArray(value),\n      ]);\n      updateFormState({\n        isDirty: true,\n        dirtyFields,\n      });\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n    renderWatchedInputs(name);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n\n    if (isArray(get(errors, name))) {\n      set(errors, name, prependAt(get(errors, name), emptyArray));\n    }\n\n    if (readFormStateRef.current.touched && get(touched, name)) {\n      set(touched, name, prependAt(get(touched, name), emptyArray));\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        dirtyFields,\n        name,\n        prependAt(get(dirtyFields, name) || [], filterBooleanArray(value)),\n      );\n    }\n\n    updateFormState({\n      errors,\n      dirtyFields,\n      isDirty: true,\n      touched,\n    });\n\n    renderWatchedInputs(name);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    setFieldAndValidState(removeArrayAt(fieldValues, index));\n    resetFields();\n\n    if (isArray(get(errors, name))) {\n      set(errors, name, removeArrayAt(get(errors, name), index));\n\n      if (!filterOutFalsy(get(errors, name, [])).length) {\n        unset(errors, name);\n      }\n    }\n\n    if (readFormStateRef.current.touched && get(touched, name)) {\n      set(touched, name, removeArrayAt(get(touched, name), index));\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFields, name)\n    ) {\n      set(dirtyFields, name, removeArrayAt(get(dirtyFields, name), index));\n\n      if (!filterOutFalsy(get(dirtyFields, name, [])).length) {\n        unset(dirtyFields, name);\n      }\n    }\n\n    if (readFormStateRef.current.isValid && !validateResolver) {\n      set(\n        validFieldsRef.current,\n        name,\n        removeArrayAt(get(validFieldsRef.current, name, []), index),\n      );\n      if (!filterOutFalsy(get(validFieldsRef.current, name, [])).length) {\n        unset(validFieldsRef.current, name);\n      }\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        removeArrayAt(get(fieldsWithValidationRef.current, name, []), index),\n      );\n      if (\n        !filterOutFalsy(get(fieldsWithValidationRef.current, name, [])).length\n      ) {\n        unset(fieldsWithValidationRef.current, name);\n      }\n    }\n\n    updateFormState({\n      dirtyFields,\n      errors,\n      touched,\n      isDirty: getIsDirtyState(removeArrayAt(fieldValues, index)),\n    });\n\n    renderWatchedInputs(name);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n\n    setFieldAndValidState(\n      insertAt(\n        fieldValues,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n\n    if (isArray(get(errors, name))) {\n      set(errors, name, insertAt(get(errors, name), index, emptyArray));\n    }\n\n    if (readFormStateRef.current.touched && get(touched, name)) {\n      set(touched, name, insertAt(get(touched, name), index, emptyArray));\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFields, name)\n    ) {\n      set(\n        dirtyFields,\n        name,\n        insertAt(get(dirtyFields, name), index, filterBooleanArray(value)),\n      );\n    }\n\n    updateFormState({\n      dirtyFields,\n      errors,\n      touched,\n      isDirty: getIsDirtyState(insertAt(fieldValues, index)),\n    });\n\n    renderWatchedInputs(name);\n\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errors, name))) {\n      swapArrayAt(get(errors, name), indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && get(touched, name)) {\n      swapArrayAt(get(touched, name), indexA, indexB);\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFields, name)\n    ) {\n      swapArrayAt(get(dirtyFields, name), indexA, indexB);\n    }\n\n    updateFormState({\n      dirtyFields,\n      errors,\n      touched,\n      isDirty: getIsDirtyState(fieldValues),\n    });\n    renderWatchedInputs(name);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errors, name))) {\n      moveArrayAt(get(errors, name), from, to);\n    }\n\n    if (readFormStateRef.current.touched && get(touched, name)) {\n      moveArrayAt(get(touched, name), from, to);\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFields, name)\n    ) {\n      moveArrayAt(get(dirtyFields, name), from, to);\n    }\n\n    updateFormState({\n      dirtyFields,\n      errors,\n      touched,\n      isDirty: getIsDirtyState(fieldValues),\n    });\n    renderWatchedInputs(name);\n  };\n\n  const reset = () => {\n    resetFields();\n    unset(fieldArrayDefaultValues.current, name);\n    memoizedDefaultValues.current = get(defaultValuesRef.current, name);\n    setFields(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    const defaultValues = get(fieldArrayDefaultValues.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValues.current, name, defaultValues);\n    }\n\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [\n    fields,\n    name,\n    fieldArrayDefaultValues,\n    fieldsRef,\n    watchFieldsRef,\n    isWatchAllRef,\n  ]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    resetFunctions[name] = reset;\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNamesRef.current.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name, errors]),\n    move: React.useCallback(move, [name, errors]),\n    prepend: React.useCallback(prepend, [name, errors]),\n    append: React.useCallback(append, [name, errors]),\n    remove: React.useCallback(remove, [fields, name, errors]),\n    insert: React.useCallback(insert, [name, errors]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types/form';\nimport { ControllerProps } from './types/props';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production' && !control && !methods) {\n    throw new Error(\n      '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n    );\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    unmountFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(unmountFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(unmountFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (isUndefined(value)) {\n      console.warn(\n        '📋 Controller `defaultValue` or useForm `defaultValues` is missing. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (as && render) {\n      console.warn(\n        '📋 Should use either `as` or `render` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (!isNotFieldArray && isUndefined(defaultValue)) {\n      console.warn(\n        '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn(\n        '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [rules, name, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n        name,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n  FieldNames,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNames<TFieldValues>;\n  fieldsWithValidation: FieldNames<TFieldValues>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && get(validFields, name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const { ref } of field.options) {\n          if (isDetached(ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport isObject from './utils/isObject';\nimport { DeepPartial } from './types/utils';\nimport {\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types/form';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n\n    if (name === '') {\n      console.warn(\n        '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  const updateWatchValue = React.useCallback(() => {\n    const value = watchInternal(name, defaultValueRef.current, idRef.current);\n    setValue(\n      isObject(value) ? { ...value } : isArray(value) ? [...value] : value,\n    );\n  }, [setValue, watchInternal, defaultValueRef, name, idRef]);\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    const watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    updateWatchValue,\n    watchFieldsHookRenderRef,\n    watchFieldsHookRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","_Array$isArray","isObjectType","isNullOrUndefined","isArray","Date","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","_reduceInstanceProperty","previous","_a","_c","__read","val","undefined","_filterInstanceProperty","Boolean","obj","defaultValue","filterOutFalsy","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","SELECT","defaultResult","validResult","values","_mapInstanceProperty","attributes","getFieldValue","fieldsRef","name","unmountFieldsStateRef","field","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","__spread","isCheckBox","getCheckboxValue","get","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","_Object$keys","unset","updatePath","childObject","_sliceInstanceProperty","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","search","output","name_1","isString","_startsWithInstanceProperty","_findInstanceProperty","deepMerge","target","source","targetValue","sourceValue","transformToNestObject","error","_b","types","message","_everyInstanceProperty","RegExp","validationData","isRegex","isValidElement","getValidateError","isMessage","validateAllFieldCriteria","errors","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","_bindInstanceProperty","appendErrors","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","exceedMin","_d","maxValue","maxMessage","_e","minValue","minMessage","valueNumber","valueAsNumber","_parseFloat","valueDate","valueAsDate","_f","maxLengthValue","_g","minLengthValue","inputLength","toString","_h","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","_o","validateError","validationResult","_j","__values","_Object$entries","_l","validateFunction","validateResult","getPath","_flatInstanceProperty","pathWithIndex","isPrimitive","getInnerPath","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","substring","_indexOfInstanceProperty","deepEqual","object1","object2","keys1","keys2","keys1_1","val1","val2","isMatchFieldArrayName","searchName","names","_someInstanceProperty","mode","isOnSubmit","isOnAll","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","_Date$now","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","_spliceInstanceProperty","indexA","indexB","temp","prepend","insert","_fillInstanceProperty","Array","mapValueToBoolean","filterBooleanArray","appendId","keyName","generateId","mapIds","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","touched","updateFormState","readFormStateRef","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","React.useState","setInputStateValue","valueRef","React.useRef","onFocusRef","shouldValidate","skipValidation","commonTask","event","getInputValue","registerField","React.useCallback","_Object$defineProperty","focus","React.useEffect","onBlur","onChange","_i","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","__assign","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","dirtyFields","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValues","validateResolver","renderWatchedInputs","getValues","memoizedDefaultValues","setFields","allFields","rootParentName","getFieldArrayParentName","getCurrentFieldsValues","appendValueWithKey","setFieldAndValidState","fieldsValues","getIsDirtyState","flagOrFields","isDirty","resetFields","reset","defaultValues","pop","shouldRenderUseWatch","watchField","resetFunctions","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","append","remove","removeArrayAt","insertAt","reValidateMode","resolver","context","shouldFocusError","shouldUnregister","criteriaMode","watchFieldsHookRef","watchFieldsHookRenderRef","defaultValuesAtRenderRef","isUnMount","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","submitCount","isSubmitting","formState","setFormState","formStateRef","observerRef","_k","state","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","isSameError","shouldRenderBasedOnError","previousError","setFieldValue","rawValue","radioRef","selectRef","selected","_includesInstanceProperty","_forEachInstanceProperty","checkboxRef","String","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","isInputsValid","_Promise","all","setInternalValues","setInternalValue","config","isFieldWatched","has","found","size","payload_1","getFieldsValues","shouldSkipValidation","forceDelete","handleChange","fieldRef","options_1","removeAllEventListeners","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","_Object$values","name_2","fieldError","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","refOrValidationOptions","watch","prop","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}